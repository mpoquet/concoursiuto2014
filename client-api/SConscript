 # -*- coding: utf-8 -*
import distutils.sysconfig
import installer
import platform
import subprocess
import os
import re


# User variables
moduleName = 'contest'
installPath = 'install'
pythonCommand = 'python'
javaPath = '/usr/lib/jvm/java-7-openjdk-amd64'

# Internal variables
srcDir = 'src'
spnlInstallPath = 'spnl-install'
includePath = ['#' + os.path.join('..', 'server'), os.path.join(spnlInstallPath, 'include')]
libPath = [os.path.join(spnlInstallPath, 'lib')]
libs = ['spnl', 'pthread']


if platform.system() == 'Windows':
    libs += ['ws2_32']


def pythonRequest(pythonCodeLine):
    pythonCodeLine = pythonCodeLine.replace('"', '\\"')
    result = subprocess.Popen(pythonCommand + ' -c "' + pythonCodeLine + '"', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    if result.wait() != 0:
        raise Exception('Critical error occured when trying to execute a python command')
    return [line.decode().strip('\n') for line in result.stdout.readlines()]


def pythonConfigRequest(request):
    pythonCodeLine = 'from distutils.sysconfig import *; print(' + request + ')'
    result = pythonRequest(pythonCodeLine)
    if len(result) == 0:
        raise Exception('No result for the request: "' + request.replace('"', '\\"') + '"')
    if len(result) > 1:
        raise Exception('Multiple result for the request: "' + request.replace('"', '\\"') + '"')
    return result[0]


def getPythonLibPath():
    #pythonPath = pythonConfigRequest('PREFIX')
    #
    #if platform.system() == 'Windows':
    #    return os.path.join(pythonPath, 'libs')
    #return os.path.join(pythonPath, 'lib')
    return pythonConfigRequest('get_config_vars().get("LIBDIR")')


def getPythonName():
    if platform.system() == 'Windows':
        pythonVersion = ''.join(pythonVersion.split('.'))
    else:
        pythonVersion = pythonConfigRequest('get_python_version()')
    #pythonVersion += pythonConfigRequest('get_config_vars().get("ABIFLAGS") or ""')
    return 'python'+pythonVersion
#    res = pythonConfigRequest('get_config_vars().get("BLDLIBRARY")')
#    if not res.startswith('-l'):
#        [...]
#            raise Exception("Unable to get the name of the python library to link")
#    return res[2:]


def getPythonLinkFlags():
    res = pythonConfigRequest('get_config_vars().get("BLDLIBRARY")')
    return re.findall('(?:[^ "]+|"[^"]*")+', res)


def getPythonLibDirName():
    res = pythonConfigRequest('get_python_lib()')
    return os.path.split(os.path.realpath(res))[-1]


def getCurrentPythonExecName():
    if platform.system() == 'Windows':
        return 'python'

    pythonVersion = distutils.sysconfig.get_python_version()
    return 'python'+pythonVersion


def getCurrentPythonBinPath():
    pythonPath = distutils.sysconfig.EXEC_PREFIX

    if platform.system() == 'Windows':
        return pythonPath
    return os.path.join(pythonPath, 'bin')


def absPath(path):
    return os.path.join(Dir('#').abspath, path)


def make():
    envBase = Environment()
    envBase['CPPPATH'] = includePath
    envBase['LIBS'] = libs
    envBase['LIBPATH'] = libPath
    envBase['ENV'] = {'PATH' : os.environ['PATH']}
    envBase['CXXFLAGS'] = '-O2'
    envBase['CXXCOMSTR'] = envBase['CCCOMSTR'] = 'Compiling "${SOURCE}"...'
    envBase['SHCCCOMSTR'] = envBase['SHCXXCOMSTR'] = 'Compiling "${SOURCE}"...'
    envBase['PCHCOMSTR'] = 'Precompiling "${SOURCE}"...'
    envBase['JAVACCOMSTR'] = 'Jcompiling java files...'
    envBase['JARCOMSTR'] = 'Jarchiving class files to "${TARGET}"...'
    envBase['LINKCOMSTR'] = 'Linking files to "${TARGET}"...'
    envBase['ARCOMSTR'] = envBase['SHLINKCOMSTR'] = envBase['LDMODULECOMSTR'] = 'Linking files to "${TARGET}"...'
    envBase['RANLIBCOMSTR'] = 'Indexing files to "${TARGET}"...'
    envBase['SWIGCOMSTR'] = 'Swiging file "${SOURCE}"...'

    makeHelp(envBase)

    lib = makeSpnl(envBase)

    srcFiles = envBase.Glob(os.path.join(srcDir, '*.cpp'))
    objFiles = envBase.SharedObject(srcFiles)
    envBase.Requires(objFiles, lib)
    
    cppTargets = makeCpp(envBase, objFiles, lib)
    pythonTargets = makePython(envBase, objFiles, lib)
    javaTargets = makeJava(envBase, objFiles, lib)

    docTargets = makeDoc(envBase)

    install = installer.Installer(envBase)
    install.AddHeaders(absPath(srcDir), '*.hpp')
    install.AddLibrary(cppTargets['lib'])
    install.AddLibrary(javaTargets['lib'])
    pythonInstallPath = os.path.join(install.libdir(), getPythonName(), getPythonLibDirName())
    install.Add(pythonInstallPath, pythonTargets['lib'])
    install.Add(pythonInstallPath, pythonTargets['pyfile'])
    javaInstallPath = os.path.join(install.sharedir(), 'java')
    install.Add(javaInstallPath, javaTargets['jar'])
    docInstallPath = os.path.join(install.sharedir(), moduleName)
    install.Add(docInstallPath, docTargets, perm=0755)

#    for target in docTargets:
#        def test():
#            print 'ADD(', docInstallPath, os.path.join(target, filename), ')'
#        envBase.AddPostAction(filename, test)
#        for filename in os.listdir(target.path):
#            #install.Add(docInstallPath, os.path.join(target, filename))


def makeSpnl(envBase):
    currentPath = Dir('.').abspath
    projectPath = Dir('#').abspath
    spnlSrcDir = os.path.join(projectPath, 'spnl')
    spnlInstallDir = Dir(spnlInstallPath).abspath
    sconsScript = os.path.join(projectPath, 'scons.py')
    pythonExec = os.path.join(getCurrentPythonBinPath(), getCurrentPythonExecName())

    commands = ['cd '+spnlSrcDir+' && '+pythonExec+' '+sconsScript+' install prefix="'+spnlInstallDir+'" -Qs']

    envSpnl = envBase.Clone()
    envSpnl['CPPPATH'] = envSpnl['LIBS'] = envSpnl['LIBPATH'] = []
    generatedFiles = [
                        spnlInstallDir+'/include/spnl/Core/ArgumentException.hpp',
                        spnlInstallDir+'/include/spnl/Core/ByteArray.hpp',
                        spnlInstallDir+'/include/spnl/Core/Errors.hpp',
                        spnlInstallDir+'/include/spnl/Core/Init.hpp',
                        spnlInstallDir+'/include/spnl/Core/InitialisationException.hpp',
                        spnlInstallDir+'/include/spnl/Events/EventArgs.hpp',
                        spnlInstallDir+'/include/spnl/Events/EventHandlerBase.hpp',
                        spnlInstallDir+'/include/spnl/Events/EventHandler.hpp',
                        spnlInstallDir+'/include/spnl/Events/Event.hpp',
                        spnlInstallDir+'/include/spnl/Network/Dns.hpp',
                        spnlInstallDir+'/include/spnl/Network/Errors.hpp',
                        spnlInstallDir+'/include/spnl/Network/IpAddress.hpp',
                        spnlInstallDir+'/include/spnl/Network/IpEndPoint.hpp',
                        spnlInstallDir+'/include/spnl/Network/NetworkException.hpp',
                        spnlInstallDir+'/include/spnl/Network/Socket.hpp',
                        spnlInstallDir+'/include/spnl/Network/SocketSet.hpp',
                        spnlInstallDir+'/include/spnl/Network/TcpSocket.hpp',
                        spnlInstallDir+'/include/spnl/Network/UdpSocket.hpp',
                        spnlInstallDir+'/include/spnl/System/Mutex.hpp',
                        spnlInstallDir+'/include/spnl/System/Semaphore.hpp',
                        spnlInstallDir+'/include/spnl/System/ThreadException.hpp',
                        spnlInstallDir+'/include/spnl/System/Thread.hpp',
                        spnlInstallDir+'/include/spnl/Text/Group.hpp',
                        spnlInstallDir+'/include/spnl/Text/Match.hpp',
                        spnlInstallDir+'/include/spnl/Text/Regex.hpp',
                        spnlInstallDir+'/include/spnl/Network.hpp',
                        spnlInstallDir+'/lib/libspnl.a',
                     ]

    spnlBuild = envSpnl.Command(generatedFiles, 'spnl', commands)
    #tmp = Glob(spnlSrcDir+'/include/spnl/*/*.hpp')+Glob(spnlSrcDir+'/include/spnl/*.hpp')+Glob(spnlSrcDir+'/lib/*.a')
    #generatedFiles = [re.sub('^'+re.escape(spnlSrcDir), spnlInstallDir, i) for i in tmp]
    #print spnlSrcDir+'/include/spnl/*/*.hpp'
    return envSpnl.AlwaysBuild(spnlBuild)


def makeCpp(envBase, objFiles, lib):
    envCpp = envBase.Clone()
    libCpp = envCpp.SharedLibrary(moduleName+'-cpp', objFiles)
    envCpp.Requires(libCpp, lib)
    return {'lib': libCpp}


def makePython(envBase, objFiles, lib):
    pythonVersion = pythonConfigRequest('get_python_version()')

    if not GetOption('silent'):
        print 'infos: python', pythonVersion, 'used'

    pythonIncludePath = pythonConfigRequest('get_python_inc()')
    swigFile = os.path.join(srcDir, moduleName+'.i')
    pyFile = os.path.join(srcDir, moduleName+'.py')
    dynLibFileExt = pythonConfigRequest('get_config_vars("SO")[0]')
    pythonFlag = []

    if int(pythonVersion.split('.')[0]) == 3:
        pythonFlag.append('-py3')

    envPy = envBase.Clone()
    envPy['SWIGFLAGS'] = ['-python', '-c++'] + pythonFlag
    envPy['LIBPATH'] += [getPythonLibPath()]
    #envPy['LIBS'] += [getPythonLibName()]
    envPy['LINKFLAGS'] += getPythonLinkFlags()
    envPy['CPPPATH'] += [pythonIncludePath]
    envPy['SWIGCXXFILESUFFIX'] = '-python.cxx'
    envPy['SHLIBPREFIX'] = ''
    envPy['SHLIBSUFFIX'] = dynLibFileExt

    libPy = envPy.SharedLibrary('_'+moduleName, objFiles+[swigFile])
    envPy.Requires(libPy, lib)
    #installedPyFile = envPy.Install('.', pyFile)
    return {'lib': libPy, 'pyfile': pyFile}


def makeJava(envBase, objFiles, lib):
    swigFile = os.path.join(srcDir, moduleName+'.i')
    javaFilesPath = os.path.join(Dir(srcDir).abspath, 'java')

    envJava = envBase.Clone()
    envJava['SWIGFLAGS'] = ['-java', '-c++']
    envJava['CPPPATH'] += [os.path.join(javaPath, 'include'), os.path.join(javaPath, 'include', 'linux')]
    envJava['SWIGOUTDIR'] = javaFilesPath
    envJava['SWIGCXXFILESUFFIX'] = '-java.cxx'

    libJava = envJava.SharedLibrary(moduleName, objFiles+[swigFile])
    envJava.Requires(libJava, lib)

    # Cela regénère les fichiers de code java qui sont déjà présent
    # car ont été généré par swig lors du envJava.SharedLibrary
    # Cependant, comme la commande est buggé du à l'utilisation de swig pour Java, 
    # scons considère que les fichier ne devrait pas exister et les supprime
    # si on tente de les utiliser explicitement
    javaClasses =   [
                        'Fleet',            'Planet',           'FleetList',    'PlanetList',
                        'Ennemy',           'GameData',         'RoundState',   'EnnemyList',
                        'GameInfos',        'ScanResult',       'FightReport',  'IntList',
                        'ScanResultList',   'FightReportList',  'LoginResult',  'Session'
                    ]

    absSrcDir = Dir(os.path.join('.', 'src')).path
    javaCppFile = os.path.join(absSrcDir, moduleName + '-java.cxx')
    javaCodeDir = os.path.join(absSrcDir, 'java')
    command = 'swig -o ' + javaCppFile + ' -outdir ' + javaCodeDir + ' -java -c++ ' + swigFile
    genFiles = [os.path.join('src', 'java', i + '.java') for i in javaClasses]
    genJavaCode = envJava.Command(genFiles, libJava, command)
    envJava.Requires(genJavaCode, libJava) # Nécessaire pour éviter les appels en parallèle

    javaSrc = envJava.Java(os.path.join(srcDir, 'classes'), os.path.join('src', 'java'))
    envJava.Requires(javaSrc, genJavaCode)
    javaJar = envJava.Jar(moduleName+'.jar', javaSrc)
    return {'lib': libJava, 'jar': javaJar}


def makeDoc(envBase):
    docDir = os.path.join(srcDir, 'Doxyfile')

    envDoc = envBase.Clone(tools=['default', 'doxygen'], toolpath=['scons-tools'])
    return envDoc.Doxygen(docDir)


def makeHelp(env):
    opts = Variables(args=ARGUMENTS)
    installer.AddOptions(opts)
    opts.Update(env)
    Help(opts.GenerateHelpText(env))


def check():
    if not Dir('#spnl').exists():
        print 'Error: the spnl directory does not exist, try to get it !'
        return False

    if not Dir('#spnl').isdir():
        print 'Error: the spnl entity must be a directory !'
        return False

    if len(Dir('#spnl').glob('*')) == 0:
        print 'Error: the spnl directory is empty !'
        print 'To fix this problem, you can type the following commands in the root directory of the project :'
        print '\tgit submodule init'
        print '\tgit submodule update'
        return False

    python = subprocess.Popen(pythonCommand + ' -c pass', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    if python.wait() != 0:
        print 'Error: unable to execute python... Have you installed it ? Is it add to the PATH ? Is the version configured in this script ?'
        return False

    swig = subprocess.Popen('swig -version', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    if swig.wait() != 0:
        print 'Error: unable to execute swig... Have you installed it ? Is it add to the PATH ?'
        return False

    gcc = subprocess.Popen('g++ --version', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    if gcc.wait() != 0:
        print 'Error: unable to execute g++... Have you installed it ? Is it add to the PATH ?'
        return False

    if not Dir(javaPath).exists():
        print 'Error: the java directory does not exist, try to change the variable javaPath in the SConscript file !'
        return False

    if not Dir(javaPath).isdir():
        print 'Error: the java directory must be a directory, try to change the variable javaPath in the SConscript file !'
        return False

    doxygen = subprocess.Popen('doxygen --version', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    if doxygen.wait() != 0:
        print 'Error: unable to execute doxygen... Have you installed it ? Is it add to the PATH ?'
        return False

    return True


if not check():
    exit(-1)

make()


