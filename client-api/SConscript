import distutils.sysconfig
import platform
import subprocess
import os
import re


# User variables
moduleName = 'contest'
installPath = 'install'
javaIncludePath = '/usr/lib/jvm/java-1.6.0-openjdk-i386/include'

# Internal variables
srcDir = 'src'
spnlInstallPath = 'spnl-install'
includePath = ['#../server', spnlInstallPath+'/include']
libPath = [spnlInstallPath+'/lib']
libs = ['spnl', 'pthread']


if platform.system() == 'Windows':
    libs += ['ws2_32']


def getPythonLibPath():
    pythonPath = distutils.sysconfig.PREFIX

    if platform.system() == 'Windows':
        return os.path.join(pythonPath, 'libs')
    return os.path.join(pythonPath, 'lib')


def getPythonLibName():
    pythonVersion = distutils.sysconfig.get_python_version()

    if platform.system() == 'Windows':
        return 'python'+''.join(pythonVersion.split('.'))
    return 'python'+pythonVersion


def getPythonExecName():
    if platform.system() == 'Windows':
        return 'python'

    pythonVersion = distutils.sysconfig.get_python_version()
    return 'python'+pythonVersion


def getPythonBinPath():
    pythonPath = distutils.sysconfig.EXEC_PREFIX

    if platform.system() == 'Windows':
        return pythonPath
    return os.path.join(pythonPath, 'bin')


def make():
    envBase = Environment()
    envBase['CPPPATH'] = includePath
    envBase['LIBS'] = libs
    envBase['LIBPATH'] = libPath
    envBase['ENV'] = {'PATH' : os.environ['PATH']}
    #envBase['CXXFLAGS'] = '-O2'
    envBase['CXXCOMSTR'] = envBase['CCCOMSTR'] = 'Compiling "${SOURCE}"...'
    envBase['SHCCCOMSTR'] = envBase['SHCXXCOMSTR'] = 'Compiling "${SOURCE}"...'
    envBase['PCHCOMSTR'] = 'Precompiling "${SOURCE}"...'
    envBase['JAVACCOMSTR'] = 'Jcompiling "${SOURCE}"...'
    envBase['JARCOMSTR'] = 'Jarchiving "${TARGET}"...'
    envBase['LINKCOMSTR'] = 'Linking "${TARGET}"...'
    envBase['ARCOMSTR'] = envBase['SHLINKCOMSTR'] = envBase['LDMODULECOMSTR'] = 'Linking "${TARGET}"...'
    envBase['RANLIBCOMSTR'] = 'Indexing "${TARGET}"...'
    envBase['SWIGCOMSTR'] = 'Swiging "${SOURCE}"...'

    lib = makeSpnl(envBase)

    srcFiles = envBase.Glob(os.path.join(srcDir, '*.cpp'))
    objFiles = envBase.SharedObject(srcFiles)
    envBase.Requires(objFiles, lib)
    
    makeCpp(envBase, objFiles, lib)
    makePython(envBase, objFiles, lib)
    makeJava(envBase, objFiles, lib)


def makeSpnl(envBase):
    currentPath = Dir('.').abspath
    projectPath = Dir('#').abspath
    spnlSrcDir = os.path.join(projectPath, 'spnl')
    spnlInstallDir = Dir(spnlInstallPath).abspath
    sconsScript = os.path.join(projectPath, 'scons.py')
    pythonExec = os.path.join(getPythonBinPath(), getPythonExecName())

    commands = ['cd '+spnlSrcDir+' && '+pythonExec+' '+sconsScript+' install prefix='+spnlInstallDir+' -Qs']
    
    envSpnl = envBase.Clone()
    envSpnl['CPPPATH'] = envSpnl['LIBS'] = envSpnl['LIBPATH'] = []
    generatedFiles = [
                        spnlInstallDir+'/include/spnl/Core/ArgumentException.hpp',
                        spnlInstallDir+'/include/spnl/Core/ByteArray.hpp',
                        spnlInstallDir+'/include/spnl/Core/Errors.hpp',
                        spnlInstallDir+'/include/spnl/Core/Init.hpp',
                        spnlInstallDir+'/include/spnl/Core/InitialisationException.hpp',
                        spnlInstallDir+'/include/spnl/Events/EventArgs.hpp',
                        spnlInstallDir+'/include/spnl/Events/EventHandlerBase.hpp',
                        spnlInstallDir+'/include/spnl/Events/EventHandler.hpp',
                        spnlInstallDir+'/include/spnl/Events/Event.hpp',
                        spnlInstallDir+'/include/spnl/Network/Dns.hpp',
                        spnlInstallDir+'/include/spnl/Network/Errors.hpp',
                        spnlInstallDir+'/include/spnl/Network/IpAddress.hpp',
                        spnlInstallDir+'/include/spnl/Network/IpEndPoint.hpp',
                        spnlInstallDir+'/include/spnl/Network/NetworkException.hpp',
                        spnlInstallDir+'/include/spnl/Network/Socket.hpp',
                        spnlInstallDir+'/include/spnl/Network/SocketSet.hpp',
                        spnlInstallDir+'/include/spnl/Network/TcpSocket.hpp',
                        spnlInstallDir+'/include/spnl/Network/UdpSocket.hpp',
                        spnlInstallDir+'/include/spnl/System/Mutex.hpp',
                        spnlInstallDir+'/include/spnl/System/Semaphore.hpp',
                        spnlInstallDir+'/include/spnl/System/ThreadException.hpp',
                        spnlInstallDir+'/include/spnl/System/Thread.hpp',
                        spnlInstallDir+'/include/spnl/Text/Group.hpp',
                        spnlInstallDir+'/include/spnl/Text/Match.hpp',
                        spnlInstallDir+'/include/spnl/Text/Regex.hpp',
                        spnlInstallDir+'/include/spnl/Network.hpp',
                        spnlInstallDir+'/lib/libspnl.a',
                     ]


    spnlBuild = envSpnl.Command(generatedFiles, 'spnl', commands)
    #tmp = Glob(spnlSrcDir+'/include/spnl/*/*.hpp')+Glob(spnlSrcDir+'/include/spnl/*.hpp')+Glob(spnlSrcDir+'/lib/*.a')
    #generatedFiles = [re.sub('^'+re.escape(spnlSrcDir), spnlInstallDir, i) for i in tmp]
    #print spnlSrcDir+'/include/spnl/*/*.hpp'
    return envSpnl.AlwaysBuild(spnlBuild)


def makeCpp(envBase, objFiles, lib):
    envCpp = envBase.Clone()
    libCpp = envCpp.SharedLibrary(moduleName+'-cpp', objFiles)
    envCpp.Requires(libCpp, lib)


def makePython(envBase, objFiles, lib):
    if not GetOption('silent'):
        pythonVersion = distutils.sysconfig.get_python_version()
        print 'infos: python', pythonVersion, 'used'

    pythonIncludePath = distutils.sysconfig.get_python_inc()
    pythonLibFile = getPythonLibName()
    swigFile = os.path.join(srcDir, moduleName+'.i')
    pyFile = os.path.join(srcDir, moduleName+'.py')
    dynLibFileExt = distutils.sysconfig.get_config_vars('SO')

    envPy = envBase.Clone()
    envPy['SWIGFLAGS'] = ['-python', '-c++']
    envPy['LIBPATH'] += [getPythonLibPath()]
    envPy['LIBS'] += [pythonLibFile]
    envPy['CPPPATH'] += [pythonIncludePath]
    envPy['SWIGCXXFILESUFFIX'] = '-python.cxx'
    envPy['SHLIBPREFIX'] = ''
    envPy['SHLIBSUFFIX'] = dynLibFileExt

    libPy = envPy.SharedLibrary('_'+moduleName, objFiles+[swigFile])
    envPy.Requires(libPy, lib)
    envPy.Install('.', pyFile)


def makeJava(envBase, objFiles, lib):
    swigFile = os.path.join(srcDir, moduleName+'.i')
    javaFilesPath = Dir(srcDir).abspath+'/java'

    envJava = envBase.Clone()
    envJava['SWIGFLAGS'] = ['-java', '-c++']
    envJava['CPPPATH'] += [javaIncludePath]
    envJava['SWIGOUTDIR'] = javaFilesPath
    envJava['SWIGCXXFILESUFFIX'] = '-java.cxx'

    libJava = envJava.SharedLibrary(moduleName, objFiles+[swigFile])
    envJava.Requires(libJava, lib)
    javaSrc = envJava.Java(os.path.join(srcDir, 'classes'), swigFile)
    javaJar = envJava.Jar(moduleName+'.jar', javaSrc)


def check():
    if not Dir('#spnl').exists():
        print "Error: the spnl directory does not exist, try to get it !"
        return False

    if not Dir('#spnl').isdir():
        print "Error: the spnl entity must be a directory !"
        return False

    if len(Dir('#spnl').glob('*')) == 0:
        print "Error: the spnl directory is empty !"
        print "To fix this problem, you can type the following commands in the root directory of the project :"
        print "\tgit submodule init"
        print "\tgit submodule update"
        return False

    swig = subprocess.Popen("swig -version", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    if swig.wait() != 0:
        print "Error: unable to execute swig... Have you installed it ? Is it add to the PATH ?"
        return False

    return True


if not check():
    exit(-1)

make()


